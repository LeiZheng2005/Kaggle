{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb7abf1d",
   "metadata": {
    "papermill": {
     "duration": 0.006535,
     "end_time": "2024-05-21T13:08:11.818224",
     "exception": false,
     "start_time": "2024-05-21T13:08:11.811689",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 01.数据集加载"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe4ee24",
   "metadata": {
    "papermill": {
     "duration": 0.005606,
     "end_time": "2024-05-21T13:08:11.829978",
     "exception": false,
     "start_time": "2024-05-21T13:08:11.824372",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**往下四个函数，分别是第一次处理，第二次处理，转换函数，划分数据集函数**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f8d2f2d",
   "metadata": {
    "papermill": {
     "duration": 0.005512,
     "end_time": "2024-05-21T13:08:11.841320",
     "exception": false,
     "start_time": "2024-05-21T13:08:11.835808",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 01.01读取与裁剪数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1531d4e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:11.854638Z",
     "iopub.status.busy": "2024-05-21T13:08:11.854284Z",
     "iopub.status.idle": "2024-05-21T13:08:11.883233Z",
     "shell.execute_reply": "2024-05-21T13:08:11.882363Z"
    },
    "papermill": {
     "duration": 0.037833,
     "end_time": "2024-05-21T13:08:11.885161",
     "exception": false,
     "start_time": "2024-05-21T13:08:11.847328",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def data_read_and_crop\n",
    "import os\n",
    "from PIL import Image\n",
    "from tqdm import tqdm\n",
    "def data_read_and_crop(labels,input_dir,output_dir):\n",
    "    # labels = ['benign', 'malignant', 'normal']\n",
    "    # input_dir = r\"D:\\Dataset\\Dataset_BUSI_with_GT\"\n",
    "    # output_dir = r\"D:\\Final_Result\\OverlayedImages\"\n",
    "    print('data_read_and_crop start!')\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "    for label in labels:\n",
    "        os.makedirs(os.path.join(output_dir, label), exist_ok=True)\n",
    "\n",
    "    # Function to overlay images and masks, resize if needed, and save the result\n",
    "    def overlay_and_save(image_path, mask_path, output_path):\n",
    "        try:\n",
    "            # Check if both image and mask files exist\n",
    "            if os.path.exists(image_path) and os.path.exists(mask_path):\n",
    "                # Open the actual image and mask image\n",
    "                image = Image.open(image_path)\n",
    "                mask = Image.open(mask_path)\n",
    "\n",
    "                # Ensure both images have the same color mode\n",
    "                if image.mode != mask.mode:\n",
    "                    mask = mask.convert(image.mode)\n",
    "\n",
    "                # Resize the images if their sizes don't match\n",
    "                if image.size != mask.size:\n",
    "                    image = image.resize(mask.size)\n",
    "\n",
    "                # Overlay the image with the mask\n",
    "                overlayed = Image.blend(image, mask, alpha=0.5)\n",
    "\n",
    "                # Save the overlayed image to the appropriate label folder\n",
    "                label = os.path.basename(os.path.dirname(image_path))\n",
    "                output_path = os.path.join(output_dir, label, os.path.basename(image_path))\n",
    "                overlayed.save(output_path)\n",
    "            else:\n",
    "                #print(f\"File not found for: {image_path} or {mask_path}. Skipping...\")\n",
    "                pass\n",
    "        except Exception as e:\n",
    "            print(f\"An error occurred for: {image_path} or {mask_path}. Error: {str(e)}\")\n",
    "\n",
    "    # Iterate through the subdirectories (benign, malignant, normal)\n",
    "    for label in labels:\n",
    "        print('labels:',label)\n",
    "        label_dir = os.path.join(input_dir, label)\n",
    "        if os.path.isdir(label_dir):\n",
    "            for image_filename in tqdm(os.listdir(label_dir)):\n",
    "                if image_filename.endswith('.png'):\n",
    "                    image_path = os.path.join(label_dir, image_filename)\n",
    "                    # Construct the mask file path based on the naming convention\n",
    "                    mask_filename = image_filename.replace('.png', '_mask.png')\n",
    "                    mask_path = os.path.join(label_dir, mask_filename)\n",
    "                    overlay_and_save(image_path, mask_path, output_dir)\n",
    "\n",
    "    print(\"Overlayed images have been saved to D:\\Final_Result\\OverlayedImages directory.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53ff1449",
   "metadata": {
    "papermill": {
     "duration": 0.005688,
     "end_time": "2024-05-21T13:08:11.897039",
     "exception": false,
     "start_time": "2024-05-21T13:08:11.891351",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 01.02划分数据集"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3d378585",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:11.910255Z",
     "iopub.status.busy": "2024-05-21T13:08:11.910004Z",
     "iopub.status.idle": "2024-05-21T13:08:13.667264Z",
     "shell.execute_reply": "2024-05-21T13:08:13.666507Z"
    },
    "papermill": {
     "duration": 1.766647,
     "end_time": "2024-05-21T13:08:13.669553",
     "exception": false,
     "start_time": "2024-05-21T13:08:11.902906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def dataset_divide\n",
    "import os\n",
    "import shutil\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "from tqdm import tqdm\n",
    "def dataset_divide(input_dir,output_dir):\n",
    "    print('dataset_divide start~')\n",
    "    # Set the path to your input folder\n",
    "    # labels = ['malignant', 'normal','benign']\n",
    "    # input_dir = r\"D:\\Final_Result\\OverlayedImages\"\n",
    "    # output_dir = r\"D:\\Final_Result\"\n",
    "    # Create a list to store file paths and labels\n",
    "    labels = []\n",
    "    file_paths = []\n",
    "    # Loop through the subdirectories (benign, malignant, normal)\n",
    "    for label in os.listdir(input_dir):\n",
    "        print('labels:',label)\n",
    "        label_dir = os.path.join(input_dir, label)\n",
    "        if os.path.isdir(label_dir):\n",
    "            for image_file in tqdm(os.listdir(label_dir)):\n",
    "                if image_file.endswith('.png') and not (image_file.endswith('_mask.png') or\n",
    "                                                         image_file.endswith('_mask_1.png') or\n",
    "                                                         image_file.endswith('_mask_2.png')):\n",
    "                    image_path = os.path.join(label_dir, image_file)\n",
    "                    labels.append(label)\n",
    "                    file_paths.append(image_path)\n",
    "\n",
    "    # Create a DataFrame to store the file paths and labels\n",
    "    data = pd.DataFrame({'Image_Path': file_paths, 'Label': labels})\n",
    "\n",
    "    # Split the dataset into train, validation, and test sets\n",
    "    train_data, test_data = train_test_split(data, test_size=0.15, random_state=42, stratify=data['Label'])\n",
    "    train_data, val_data = train_test_split(train_data, test_size=0.15, random_state=42, stratify=train_data['Label'])\n",
    "\n",
    "    # Define the paths for the train, validation, and test directories\n",
    "\n",
    "    train_dir = os.path.join(output_dir,'train')\n",
    "    val_dir = os.path.join(output_dir,'validation')\n",
    "    test_dir = os.path.join(output_dir,'test')\n",
    "\n",
    "    # Create the train, validation, and test directories and subdirectories\n",
    "    for label in os.listdir(input_dir):\n",
    "        os.makedirs(os.path.join(train_dir, label), exist_ok=True)\n",
    "        os.makedirs(os.path.join(val_dir, label), exist_ok=True)\n",
    "        os.makedirs(os.path.join(test_dir, label), exist_ok=True)\n",
    "\n",
    "    # Copy the images to the corresponding directories\n",
    "    for _, row in train_data.iterrows():\n",
    "        image_path = row['Image_Path']\n",
    "        label = row['Label']\n",
    "        shutil.copy(image_path, os.path.join(train_dir, label))\n",
    "\n",
    "    for _, row in val_data.iterrows():\n",
    "        image_path = row['Image_Path']\n",
    "        label = row['Label']\n",
    "        shutil.copy(image_path, os.path.join(val_dir, label))\n",
    "\n",
    "    for _, row in test_data.iterrows():\n",
    "        image_path = row['Image_Path']\n",
    "        label = row['Label']\n",
    "        shutil.copy(image_path, os.path.join(test_dir, label))\n",
    "    print('Dataset divided over!')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30dda7c2",
   "metadata": {
    "papermill": {
     "duration": 0.005917,
     "end_time": "2024-05-21T13:08:13.681680",
     "exception": false,
     "start_time": "2024-05-21T13:08:13.675763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 01.03图片变换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f785e0b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:13.694987Z",
     "iopub.status.busy": "2024-05-21T13:08:13.694566Z",
     "iopub.status.idle": "2024-05-21T13:08:19.984116Z",
     "shell.execute_reply": "2024-05-21T13:08:19.983328Z"
    },
    "papermill": {
     "duration": 6.298568,
     "end_time": "2024-05-21T13:08:19.986396",
     "exception": false,
     "start_time": "2024-05-21T13:08:13.687828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def data_transforms\n",
    "from torchvision import transforms\n",
    "from torchvision.transforms import RandomHorizontalFlip, RandomRotation, ColorJitter\n",
    "def data_transforms(datasets_class):\n",
    "\n",
    "    # Define the minority classes in your dataset\n",
    "    class_names = ['malignant', 'normal','benign']\n",
    "    minority_classes = ['malignant', 'normal']\n",
    "\n",
    "    # Define custom data transformations for minority classes\n",
    "    minority_class_transforms = transforms.Compose([\n",
    "        RandomHorizontalFlip(p=0.9),  # Apply with 90% probability\n",
    "        RandomRotation(15, expand=False, center=None),\n",
    "        ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),\n",
    "    ])\n",
    "    if datasets_class == 'train':\n",
    "        f = transforms.Compose([\n",
    "            transforms.Resize(256),\n",
    "            transforms.CenterCrop(224),\n",
    "            # Apply custom augmentations to minority classes\n",
    "            transforms.RandomApply([minority_class_transforms], p=0.5) if any(cls in minority_classes for cls in class_names) else transforms.RandomApply([], p=0.0),\n",
    "            transforms.ToTensor(),\n",
    "            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
    "        ])\n",
    "    else:\n",
    "        f = transforms.Compose([\n",
    "            transforms.Resize(256),\n",
    "            transforms.CenterCrop(224),\n",
    "            transforms.ToTensor(),\n",
    "            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
    "        ])\n",
    "    return f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "40cb68d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:20.000875Z",
     "iopub.status.busy": "2024-05-21T13:08:19.999901Z",
     "iopub.status.idle": "2024-05-21T13:08:20.008029Z",
     "shell.execute_reply": "2024-05-21T13:08:20.007164Z"
    },
    "papermill": {
     "duration": 0.017108,
     "end_time": "2024-05-21T13:08:20.009980",
     "exception": false,
     "start_time": "2024-05-21T13:08:19.992872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# def data_loading\n",
    "import os\n",
    "from torchvision.datasets import ImageFolder\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# from Data_Operations.Data_Augmentation.Data_Transforms import data_transforms\n",
    "def data_loading(data_dir):\n",
    "    # data_dir = r\"D:\\Final_Result\"\n",
    "\n",
    "    # Create datasets for train, validation, and test\n",
    "    image_datasets = {\n",
    "        x: ImageFolder(\n",
    "            root=os.path.join(data_dir, x),\n",
    "            transform=data_transforms(x)\n",
    "        )\n",
    "        for x in ['train', 'validation', 'test']\n",
    "    }\n",
    "\n",
    "    # Specify batch size for dataloaders\n",
    "    batch_size = 32  # You can adjust this based on your hardware and preferences\n",
    "\n",
    "    # Create dataloaders for train, validation, and test\n",
    "    dataloaders = {x: DataLoader(image_datasets[x], batch_size=batch_size, shuffle=True, num_workers=4)\n",
    "                   for x in ['train', 'validation', 'test']}\n",
    "\n",
    "    # Calculate dataset sizes\n",
    "    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'validation', 'test']}\n",
    "\n",
    "    # Get class labels\n",
    "    class_names = image_datasets['train'].classes\n",
    "\n",
    "    # Print dataset sizes and class labels\n",
    "    print(\"Dataset Sizes:\", dataset_sizes)\n",
    "    print(\"Class Labels:\", class_names)\n",
    "    return image_datasets,dataloaders,dataset_sizes\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ee737ef",
   "metadata": {
    "papermill": {
     "duration": 0.005756,
     "end_time": "2024-05-21T13:08:20.021767",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.016011",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**往上是数据集加载的四个函数，分别是第一次处理，第二次处理，转换函数，划分数据集**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d2ef5bc",
   "metadata": {
    "papermill": {
     "duration": 0.00573,
     "end_time": "2024-05-21T13:08:20.033624",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.027894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 02.模型及评估"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcfa1f45",
   "metadata": {
    "papermill": {
     "duration": 0.006624,
     "end_time": "2024-05-21T13:08:20.046244",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.039620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**往下是模型的下载，训练模型主体函数，评估函数**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abe96f62",
   "metadata": {
    "papermill": {
     "duration": 0.005767,
     "end_time": "2024-05-21T13:08:20.057991",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.052224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 02.01下载模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6ed84cb4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:20.070993Z",
     "iopub.status.busy": "2024-05-21T13:08:20.070695Z",
     "iopub.status.idle": "2024-05-21T13:08:20.076480Z",
     "shell.execute_reply": "2024-05-21T13:08:20.075553Z"
    },
    "papermill": {
     "duration": 0.01438,
     "end_time": "2024-05-21T13:08:20.078312",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.063932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Transfer Learning by fineTuning the pretrained Resnet101 Model\n",
    "#Load Resnet101 pretained Model\n",
    "#If pretained is not working, you can also use weights instead.\n",
    "\n",
    "import torch.nn as nn\n",
    "from torchvision.models import resnet50\n",
    "def Resnet50(labels):\n",
    "    # labels = ['malignant', 'normal','benign']\n",
    "    resnet50_model= resnet50(pretrained=True)\n",
    "\n",
    "    # print(resnet50)\n",
    "\n",
    "    for param in resnet50_model.parameters():\n",
    "        param.requires_grad = True\n",
    "\n",
    "    #Get the number of Input features of Resnet last fully connected layer\n",
    "    #because we are going to replace it with new fully connected layer.\n",
    "    in_features = resnet50_model.fc.in_features\n",
    "\n",
    "    #Reset the final fully connected layer of the of the pre-trained Resnet.\n",
    "    resnet50_model.fc = nn.Linear(in_features, len(labels))\n",
    "    print('Resnet50  finished!')\n",
    "    return resnet50_model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8378cb6",
   "metadata": {
    "papermill": {
     "duration": 0.005791,
     "end_time": "2024-05-21T13:08:20.090236",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.084445",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 02.02 训练模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "96cd552d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:20.103624Z",
     "iopub.status.busy": "2024-05-21T13:08:20.103355Z",
     "iopub.status.idle": "2024-05-21T13:08:20.121410Z",
     "shell.execute_reply": "2024-05-21T13:08:20.120583Z"
    },
    "papermill": {
     "duration": 0.027054,
     "end_time": "2024-05-21T13:08:20.123307",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.096253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import time\n",
    "import copy\n",
    "import torch\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "from tqdm import tqdm\n",
    "\n",
    "# Define the training function with early stopping and additional features\n",
    "# Lists to store training and validation losses\n",
    "# train_losses = []\n",
    "# val_losses = []\n",
    "\n",
    "\n",
    "def train_model_with_early_stopping(model, lossFunction, optimizer, scheduler, dataloaders, dataset_sizes, class_names,\n",
    "                                    device, train_losses, val_losses,  num_epochs=200, patience=10):\n",
    "    since = time.time()\n",
    "    best_model_wts = copy.deepcopy(model.state_dict())\n",
    "    best_loss = float('inf')  # Initialize best_loss with a large value\n",
    "    consecutive_epochs_without_improvement = 0\n",
    "    for epoch in tqdm(range(num_epochs)):\n",
    "#         print('-' * 50)\n",
    "        print('Epoch {}/{}'.format(epoch, num_epochs - 1))\n",
    "        # print('-' * 3)\n",
    "\n",
    "        # Each epoch has a training and validation phase\n",
    "        for phase in ['train', 'validation']:\n",
    "            if phase == 'train':\n",
    "                model.train()  # Set model to training mode\n",
    "            else:\n",
    "                model.eval()  # Set model to evaluate mode\n",
    "\n",
    "            running_loss = 0.0\n",
    "            running_corrects = 0\n",
    "            # print('Iterate over data~')\n",
    "            # print()\n",
    "            # Iterate over data\n",
    "            for inputs, labels in dataloaders[phase]:\n",
    "                inputs = inputs.to(device)\n",
    "                labels = labels.to(device)\n",
    "\n",
    "                # Zero the parameter gradients\n",
    "                optimizer.zero_grad()\n",
    "\n",
    "                # Forward\n",
    "                with torch.set_grad_enabled(phase == 'train'):\n",
    "                    outputs = model(inputs)\n",
    "                    _, preds = torch.max(outputs, 1)\n",
    "                    loss = lossFunction(outputs, labels)\n",
    "\n",
    "                    # Backward + optimize only if in training phase\n",
    "                    if phase == 'train':\n",
    "                        loss.backward()\n",
    "                        optimizer.step()\n",
    "\n",
    "                # Append training loss here\n",
    "                if phase == 'train':\n",
    "                    train_losses.append(loss.item())  # Append training loss\n",
    "                else:\n",
    "                    val_losses.append(loss.item())  # Append validation loss\n",
    "\n",
    "                # Statistics\n",
    "                running_loss += loss.item() * inputs.size(0)\n",
    "                running_corrects += torch.sum(preds == labels.data)\n",
    "\n",
    "            if phase == 'train':\n",
    "                scheduler.step()\n",
    "\n",
    "            epoch_loss = running_loss / dataset_sizes[phase]\n",
    "            epoch_acc = running_corrects.double() / dataset_sizes[phase]\n",
    "\n",
    "            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n",
    "                phase, epoch_loss, epoch_acc))\n",
    "\n",
    "            # Early stopping: Check if validation loss improved\n",
    "            if phase == 'validation':\n",
    "                if epoch_loss < best_loss:\n",
    "                    best_loss = epoch_loss\n",
    "                    best_model_wts = copy.deepcopy(model.state_dict())\n",
    "                    consecutive_epochs_without_improvement = 0\n",
    "                else:\n",
    "                    consecutive_epochs_without_improvement += 1\n",
    "\n",
    "                val_losses.append(epoch_loss)\n",
    "\n",
    "        # Check if early stopping criteria are met\n",
    "        if consecutive_epochs_without_improvement >= patience:\n",
    "            print(f\"Early stopping after {epoch} epochs\")\n",
    "            break\n",
    "\n",
    "        print()\n",
    "\n",
    "    time_elapsed = time.time() - since\n",
    "    print('Training complete in {:.0f}m {:.0f}s'.format(\n",
    "        time_elapsed // 60, time_elapsed % 60))\n",
    "    print('Best val Loss: {:.4f}'.format(best_loss))\n",
    "\n",
    "    # Load best model weights\n",
    "    model.load_state_dict(best_model_wts)\n",
    "\n",
    "    # Calculate classification report and confusion matrix for validation data\n",
    "    y_true = []\n",
    "    y_pred = []\n",
    "\n",
    "    model.eval()  # Set model to evaluation mode\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in dataloaders['validation']:\n",
    "            inputs = inputs.to(device)\n",
    "            labels = labels.to(device)\n",
    "\n",
    "            outputs = model(inputs)\n",
    "            _, preds = torch.max(outputs, 1)\n",
    "\n",
    "            y_true.extend(labels.cpu().numpy())\n",
    "            y_pred.extend(preds.cpu().numpy())\n",
    "\n",
    "    # Generate classification report\n",
    "    target_names = [str(class_names[i]) for i in range(len(class_names))]\n",
    "    print(classification_report(y_true, y_pred, target_names=target_names))\n",
    "\n",
    "    # Generate confusion matrix\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    print(\"Confusion Matrix:\")\n",
    "    print(cm)\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe405f48",
   "metadata": {
    "papermill": {
     "duration": 0.006099,
     "end_time": "2024-05-21T13:08:20.135676",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.129577",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 02.03 评估模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b40aaf9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:20.149560Z",
     "iopub.status.busy": "2024-05-21T13:08:20.149308Z",
     "iopub.status.idle": "2024-05-21T13:08:20.330480Z",
     "shell.execute_reply": "2024-05-21T13:08:20.329566Z"
    },
    "papermill": {
     "duration": 0.190668,
     "end_time": "2024-05-21T13:08:20.332750",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.142082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "\n",
    "from torch.optim import lr_scheduler\n",
    "import torch.optim as optim\n",
    "from torch import nn as nn\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "def loss_with_evaluate(model):\n",
    "    optimizer = optim.Adam(model.parameters(), lr=0.00005)\n",
    "\n",
    "    # Decay LR by a factor of 0.1 every 7 epochs\n",
    "    scheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)\n",
    "    #Define loss functions\n",
    "    Loss_Function = nn.CrossEntropyLoss()\n",
    "    return optimizer,scheduler,Loss_Function\n",
    "\n",
    "\n",
    "def Evaluate(class_names,model,device,dataloaders,train_losses,val_losses):\n",
    "    # Define label names\n",
    "    # class_names = ['malignant', 'normal', 'benign']\n",
    "    label_names = class_names\n",
    "\n",
    "    # Calculate classification report and confusion matrix on unseen test data\n",
    "    y_true = []\n",
    "    y_pred = []\n",
    "\n",
    "    model_fineTuning = model\n",
    "    model_fineTuning.eval()  # Set model to evaluation mode\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in dataloaders['test']:\n",
    "            inputs = inputs.to(device)\n",
    "            labels = labels.to(device)\n",
    "\n",
    "            outputs = model_fineTuning(inputs)\n",
    "            _, preds = torch.max(outputs, 1)\n",
    "\n",
    "            y_true.extend(labels.cpu().numpy())\n",
    "            y_pred.extend(preds.cpu().numpy())\n",
    "\n",
    "    # Generate classification report\n",
    "    classification_rep = classification_report(y_true, y_pred, target_names=label_names, output_dict=True)\n",
    "\n",
    "    # Generate confusion matrix\n",
    "    confusion_mat = confusion_matrix(y_true, y_pred)\n",
    "\n",
    "    # Plot the confusion matrix with label names\n",
    "    plt.figure(figsize=(5, 3))\n",
    "    sns.heatmap(confusion_mat, annot=True, fmt='d', cmap='Blues', cbar=False, xticklabels=label_names,\n",
    "                yticklabels=label_names)\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('Actual')\n",
    "    plt.title('Confusion Matrix')\n",
    "    plt.show()\n",
    "\n",
    "    # calculate the percentage\n",
    "    confusion_mtx_percent = confusion_mat.astype('float') / confusion_mat.sum(axis=1)[:, np.newaxis] * 100\n",
    "\n",
    "    f, ax = plt.subplots(figsize=(8, 5))\n",
    "    sns.heatmap(confusion_mtx_percent, annot=True, linewidths=0.01, cmap=\"BuPu\", linecolor=\"gray\", fmt='.1f', ax=ax)\n",
    "    plt.xlabel(\"Predicted Label\")\n",
    "    plt.ylabel(\"True Label\")\n",
    "    plt.title(\"Confusion Matrix (Percentage)\")\n",
    "    plt.show()\n",
    "    # Convert the classification report to a heatmap\n",
    "    plt.figure(figsize=(6, 4))\n",
    "    sns.heatmap(pd.DataFrame(classification_rep).iloc[:-1, :].T, annot=True, cmap='Blues',\n",
    "                fmt='.2f')  # Simplify classification report\n",
    "    plt.title('Classification Report Heatmap')\n",
    "    plt.show()\n",
    "\n",
    "    # Print the simplified classification report\n",
    "    print(\"Simplified Classification Report:\")\n",
    "    print(pd.DataFrame(classification_rep).iloc[:-1, :])  # Display without support and avg/total rows\n",
    "    # Plotting the training and validation losses\n",
    "    plt.plot(train_losses, label='Train Loss')\n",
    "    plt.plot(val_losses, label='Validation Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bb082c0",
   "metadata": {
    "papermill": {
     "duration": 0.006349,
     "end_time": "2024-05-21T13:08:20.345487",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.339138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**往上是模型的下载，训练模型主体函数，评估函数**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77fc4a23",
   "metadata": {
    "papermill": {
     "duration": 0.006444,
     "end_time": "2024-05-21T13:08:20.358443",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.351999",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 03.主函数"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a898b10e",
   "metadata": {
    "papermill": {
     "duration": 0.006008,
     "end_time": "2024-05-21T13:08:20.370887",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.364879",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 03.01我是主函数，主函数是我～"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b56f1fd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:08:20.385394Z",
     "iopub.status.busy": "2024-05-21T13:08:20.385044Z",
     "iopub.status.idle": "2024-05-21T13:11:46.230698Z",
     "shell.execute_reply": "2024-05-21T13:11:46.229688Z"
    },
    "papermill": {
     "duration": 205.855438,
     "end_time": "2024-05-21T13:11:46.232717",
     "exception": false,
     "start_time": "2024-05-21T13:08:20.377279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "加载数据集:呜呜呜~\n",
      "data_read_and_crop start!\n",
      "labels: malignant\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 421/421 [00:22<00:00, 18.93it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "labels: normal\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 266/266 [00:16<00:00, 16.10it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "labels: benign\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 891/891 [00:48<00:00, 18.51it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overlayed images have been saved to D:\\Final_Result\\OverlayedImages directory.\n",
      "dataset_divide start~\n",
      "labels: benign\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 437/437 [00:00<00:00, 229659.30it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "labels: normal\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 133/133 [00:00<00:00, 228905.39it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "labels: malignant\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 210/210 [00:00<00:00, 258983.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset divided over!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n",
      "100%|██████████| 97.8M/97.8M [00:00<00:00, 176MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resnet50  finished!\n",
      "Dataset Sizes: {'train': 563, 'validation': 100, 'test': 117}\n",
      "Class Labels: ['benign', 'malignant', 'normal']\n",
      "Model train~\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/200 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0/199\n",
      "train Loss: 0.6336 Acc: 0.8366\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 1/200 [00:06<20:59,  6.33s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1944 Acc: 0.9400\n",
      "\n",
      "Epoch 1/199\n",
      "train Loss: 0.1450 Acc: 0.9609\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  1%|          | 2/200 [00:11<18:27,  5.59s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1231 Acc: 0.9600\n",
      "\n",
      "Epoch 2/199\n",
      "train Loss: 0.0974 Acc: 0.9680\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  2%|▏         | 3/200 [00:16<17:36,  5.36s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1497 Acc: 0.9500\n",
      "\n",
      "Epoch 3/199\n",
      "train Loss: 0.0604 Acc: 0.9876\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  2%|▏         | 4/200 [00:22<17:44,  5.43s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1927 Acc: 0.9400\n",
      "\n",
      "Epoch 4/199\n",
      "train Loss: 0.0509 Acc: 0.9840\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  2%|▎         | 5/200 [00:27<17:14,  5.30s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1311 Acc: 0.9500\n",
      "\n",
      "Epoch 5/199\n",
      "train Loss: 0.0497 Acc: 0.9787\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  3%|▎         | 6/200 [00:32<17:02,  5.27s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1420 Acc: 0.9500\n",
      "\n",
      "Epoch 6/199\n",
      "train Loss: 0.0401 Acc: 0.9911\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  4%|▎         | 7/200 [00:37<16:35,  5.16s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1517 Acc: 0.9600\n",
      "\n",
      "Epoch 7/199\n",
      "train Loss: 0.0250 Acc: 0.9911\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  4%|▍         | 8/200 [00:42<16:27,  5.14s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1258 Acc: 0.9600\n",
      "\n",
      "Epoch 8/199\n",
      "train Loss: 0.0128 Acc: 0.9982\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  4%|▍         | 9/200 [00:47<16:17,  5.12s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1224 Acc: 0.9600\n",
      "\n",
      "Epoch 9/199\n",
      "train Loss: 0.0200 Acc: 0.9929\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  5%|▌         | 10/200 [00:52<16:20,  5.16s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1173 Acc: 0.9600\n",
      "\n",
      "Epoch 10/199\n",
      "train Loss: 0.0196 Acc: 0.9964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|▌         | 11/200 [00:57<16:15,  5.16s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1274 Acc: 0.9600\n",
      "\n",
      "Epoch 11/199\n",
      "train Loss: 0.0110 Acc: 0.9982\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|▌         | 12/200 [01:03<16:13,  5.18s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1129 Acc: 0.9600\n",
      "\n",
      "Epoch 12/199\n",
      "train Loss: 0.0146 Acc: 0.9982\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|▋         | 13/200 [01:08<15:59,  5.13s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1217 Acc: 0.9600\n",
      "\n",
      "Epoch 13/199\n",
      "train Loss: 0.0197 Acc: 0.9964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  7%|▋         | 14/200 [01:13<15:43,  5.07s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1159 Acc: 0.9600\n",
      "\n",
      "Epoch 14/199\n",
      "train Loss: 0.0200 Acc: 0.9964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  8%|▊         | 15/200 [01:17<15:32,  5.04s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1222 Acc: 0.9600\n",
      "\n",
      "Epoch 15/199\n",
      "train Loss: 0.0159 Acc: 0.9982\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  8%|▊         | 16/200 [01:23<15:40,  5.11s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1185 Acc: 0.9600\n",
      "\n",
      "Epoch 16/199\n",
      "train Loss: 0.0165 Acc: 0.9964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  8%|▊         | 17/200 [01:28<15:35,  5.11s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1343 Acc: 0.9600\n",
      "\n",
      "Epoch 17/199\n",
      "train Loss: 0.0134 Acc: 0.9947\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  9%|▉         | 18/200 [01:33<15:28,  5.10s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1174 Acc: 0.9600\n",
      "\n",
      "Epoch 18/199\n",
      "train Loss: 0.0123 Acc: 1.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 10%|▉         | 19/200 [01:38<15:22,  5.10s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1156 Acc: 0.9500\n",
      "\n",
      "Epoch 19/199\n",
      "train Loss: 0.0080 Acc: 1.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 10%|█         | 20/200 [01:43<15:14,  5.08s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1231 Acc: 0.9600\n",
      "\n",
      "Epoch 20/199\n",
      "train Loss: 0.0129 Acc: 0.9964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 10%|█         | 21/200 [01:48<15:03,  5.05s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1234 Acc: 0.9600\n",
      "\n",
      "Epoch 21/199\n",
      "train Loss: 0.0120 Acc: 1.0000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 10%|█         | 21/200 [01:53<16:07,  5.41s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "validation Loss: 0.1191 Acc: 0.9600\n",
      "Early stopping after 21 epochs\n",
      "Training complete in 1m 54s\n",
      "Best val Loss: 0.1129\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "   malignant       0.93      1.00      0.97        56\n",
      "      normal       1.00      0.85      0.92        27\n",
      "      benign       1.00      1.00      1.00        17\n",
      "\n",
      "    accuracy                           0.96       100\n",
      "   macro avg       0.98      0.95      0.96       100\n",
      "weighted avg       0.96      0.96      0.96       100\n",
      "\n",
      "Confusion Matrix:\n",
      "[[56  0  0]\n",
      " [ 4 23  0]\n",
      " [ 0  0 17]]\n",
      "torch.save~\n",
      "Evaluate~\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simplified Classification Report:\n",
      "           malignant  normal  benign  accuracy  macro avg  weighted avg\n",
      "precision        1.0     1.0     1.0       1.0        1.0           1.0\n",
      "recall           1.0     1.0     1.0       1.0        1.0           1.0\n",
      "f1-score         1.0     1.0     1.0       1.0        1.0           1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import torch\n",
    "import warnings\n",
    "import shutil  \n",
    "from multiprocessing import freeze_support\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    freeze_support()\n",
    "    \n",
    "#     temp = '/kaggle/working/'\n",
    "#     if os.path.exists(temp):\n",
    "#         shutil.rmtree('/kaggle/working/')  \n",
    "#         os.makedirs('/kaggle/working/',exist_ok=True)  \n",
    "#     else:\n",
    "#         pass\n",
    "#     print('clear finish~')\n",
    "    ###\n",
    "    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
    "    warnings.filterwarnings(\"ignore\", category=ResourceWarning)\n",
    "    ###\n",
    "\n",
    "    device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "    labels = ['malignant', 'normal','benign']\n",
    "    data_dir = '/kaggle/working/'\n",
    "\n",
    "    ####加载数据集\n",
    "    print('加载数据集:呜呜呜~')\n",
    "    # crop第一次处理\n",
    "    input_dir = '/kaggle/input/breast-ultrasound-images-dataset/Dataset_BUSI_with_GT'\n",
    "    output_dir = '/kaggle/working/OverlayedImages'\n",
    "    result_dir = '/kaggle/working/'\n",
    "    data_read_and_crop(labels=labels,input_dir=input_dir,output_dir=output_dir)\n",
    "    # divide_with_transforms第二次处理\n",
    "    dataset_divide(input_dir=output_dir,output_dir=result_dir)\n",
    "\n",
    "\n",
    "    save_model_pkl_path = r\"D:\\Final_Result\\Resnet50_pkl\"\n",
    "    os.makedirs(save_model_pkl_path, exist_ok=True)\n",
    "    save_model_pkl_path = os.path.join(save_model_pkl_path,'resnet50_fineTuning.h5')\n",
    "\n",
    "    resnet50=Resnet50(labels=labels)\n",
    "    resnet50.to(device=device)\n",
    "    optimizer,scheduler,Loss_Function = loss_with_evaluate(model=resnet50)\n",
    "    image_datasets,dataloaders,dataset_sizes = data_loading(data_dir=data_dir)\n",
    "\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "    print('Model train~')\n",
    "    BCI_Model = train_model_with_early_stopping(\n",
    "        model=resnet50,\n",
    "        lossFunction=Loss_Function,\n",
    "        optimizer=optimizer,\n",
    "        scheduler=scheduler,\n",
    "        dataloaders=dataloaders,\n",
    "        dataset_sizes=dataset_sizes,\n",
    "        class_names=labels,\n",
    "        device=device,\n",
    "        train_losses=train_losses,\n",
    "        val_losses=val_losses,\n",
    "        num_epochs=200,\n",
    "        patience=10\n",
    "    )\n",
    "    print('torch.save~')\n",
    "    torch.save(BCI_Model, save_model_pkl_path)\n",
    "    print('Evaluate~')\n",
    "    Evaluate(\n",
    "        class_names=labels,\n",
    "        model=resnet50,\n",
    "        device=device,\n",
    "        dataloaders=dataloaders,\n",
    "        train_losses=train_losses,\n",
    "        val_losses=val_losses\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32f1bb3f",
   "metadata": {
    "papermill": {
     "duration": 0.050047,
     "end_time": "2024-05-21T13:11:46.333607",
     "exception": false,
     "start_time": "2024-05-21T13:11:46.283560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "最后放一个测试的函数，并没有用到，毕竟模型都训练完了还要测试什么~"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f01652e",
   "metadata": {
    "papermill": {
     "duration": 0.051105,
     "end_time": "2024-05-21T13:11:46.435070",
     "exception": false,
     "start_time": "2024-05-21T13:11:46.383965",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 03.02不起眼的测试函数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a79192d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T13:11:46.536362Z",
     "iopub.status.busy": "2024-05-21T13:11:46.536025Z",
     "iopub.status.idle": "2024-05-21T13:11:46.555135Z",
     "shell.execute_reply": "2024-05-21T13:11:46.554294Z"
    },
    "papermill": {
     "duration": 0.072062,
     "end_time": "2024-05-21T13:11:46.557024",
     "exception": false,
     "start_time": "2024-05-21T13:11:46.484962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import torch\n",
    "\n",
    "# Function to count the number of files in a directory\n",
    "def test_crop_dir(labels,input_dir,output_dir):\n",
    "    print('test_crop_dir start!')\n",
    "    def count_files_in_directory(directory):\n",
    "        return sum(len(files) for _, _, files in os.walk(directory))\n",
    "\n",
    "    # labels = ['benign', 'malignant', 'normal']\n",
    "    # input_dir = r\"D:\\Dataset\\Dataset_BUSI_with_GT\"\n",
    "    # output_dir = r\"D:\\Final_Result\\OverlayedImages\"\n",
    "\n",
    "    # Count the files in the input and output directories\n",
    "    input_counts = {}\n",
    "    output_counts = {}\n",
    "\n",
    "    # Count files in input directory\n",
    "    for label in labels:\n",
    "        label_dir = os.path.join(input_dir, label)\n",
    "        if os.path.isdir(label_dir):\n",
    "            input_counts[label] = count_files_in_directory(label_dir)\n",
    "\n",
    "    # Count files in output directory\n",
    "    for label in labels:\n",
    "        label_dir = os.path.join(output_dir, label)\n",
    "        if os.path.isdir(label_dir):\n",
    "            output_counts[label] = count_files_in_directory(label_dir)\n",
    "\n",
    "    # Print file counts\n",
    "    print(\"File Counts Before Overlay-includes masks:\")\n",
    "    for label, count in input_counts.items():\n",
    "        print(f\"{label}: {count} files\")\n",
    "\n",
    "    print(\"\\nFile Counts After Overlay:\")\n",
    "    for label, count in output_counts.items():\n",
    "        print(f\"{label}: {count} files\")\n",
    "    print('test_crop_dir over!')\n",
    "    \n",
    "def test_dataset_divide(data_dir):\n",
    "    print('test_dataset_divide start!')\n",
    "\n",
    "    train_dir = os.path.join(data_dir,'train')\n",
    "\n",
    "    # List the subdirectories (benign, malignant, normal)\n",
    "    subdirectories = ['benign', 'malignant', 'normal']\n",
    "\n",
    "    # Dictionary to store file counts\n",
    "    file_counts = {}\n",
    "\n",
    "    # Loop through the subdirectories and count files in each\n",
    "    for subdirectory in subdirectories:\n",
    "        subdirectory_path = os.path.join(train_dir, subdirectory)\n",
    "        if os.path.exists(subdirectory_path):\n",
    "            file_count = len(os.listdir(subdirectory_path))\n",
    "            file_counts[subdirectory] = file_count\n",
    "\n",
    "    # Print the file counts\n",
    "    for category, count in file_counts.items():\n",
    "       # print(\"Train folder counts including masks:\")\n",
    "        print(f\"Train {category}: {count}\")\n",
    "\n",
    "    val_dir = os.path.join(data_dir,'validation')\n",
    "\n",
    "    # List the subdirectories (benign, malignant, normal)\n",
    "    subdirectories = ['benign', 'malignant', 'normal']\n",
    "\n",
    "    # Dictionary to store file counts\n",
    "    file_counts = {}\n",
    "\n",
    "    # Loop through the subdirectories and count files in each\n",
    "    for subdirectory in subdirectories:\n",
    "        subdirectory_path = os.path.join(val_dir, subdirectory)\n",
    "        if os.path.exists(subdirectory_path):\n",
    "            file_count = len(os.listdir(subdirectory_path))\n",
    "            file_counts[subdirectory] = file_count\n",
    "\n",
    "    # Print the file counts\n",
    "    for category, count in file_counts.items():\n",
    "        #print(\"Validation folder counts including masks:\")\n",
    "        print(f\"Validation {category}: {count}\")\n",
    "\n",
    "\n",
    "    test_dir = os.path.join(data_dir,'test')\n",
    "\n",
    "    # List the subdirectories (benign, malignant, normal)\n",
    "    subdirectories = ['benign', 'malignant', 'normal']\n",
    "\n",
    "    # Dictionary to store file counts\n",
    "    file_counts = {}\n",
    "\n",
    "    # Loop through the subdirectories and count files in each\n",
    "    for subdirectory in subdirectories:\n",
    "        subdirectory_path = os.path.join(test_dir, subdirectory)\n",
    "        if os.path.exists(subdirectory_path):\n",
    "            file_count = len(os.listdir(subdirectory_path))\n",
    "            file_counts[subdirectory] = file_count\n",
    "\n",
    "    # Print the file counts\n",
    "    for category, count in file_counts.items():\n",
    "        #print(\"test folder counts including masks:\")\n",
    "        print(f\"test {category}: {count}\")\n",
    "    print('test_dataset_divide over!')\n",
    "\n",
    "\n",
    "from torch.utils.data import DataLoader\n",
    "def test_val_with_acc(device,model,image_datasets):\n",
    "\n",
    "    # Set the number of images to display\n",
    "    num_images_to_display = 15\n",
    "\n",
    "    # Create a DataLoader for the test dataset\n",
    "    test_dataloader = DataLoader(image_datasets['test'], batch_size=num_images_to_display, shuffle=True, num_workers=4)\n",
    "\n",
    "    # Get a batch of test data\n",
    "    inputs, labels = next(iter(test_dataloader))\n",
    "\n",
    "    # Move inputs to the device\n",
    "    inputs = inputs.to(device)\n",
    "\n",
    "    # Convert images to grayscale\n",
    "    grayscale_images = inputs.cpu().numpy().mean(axis=1)  # Convert RGB to grayscale\n",
    "\n",
    "    # Get model predictions\n",
    "\n",
    "    model_fineTuning = model\n",
    "    with torch.no_grad():\n",
    "\n",
    "        model_fineTuning.eval()\n",
    "        outputs = model_fineTuning(inputs)\n",
    "        _, preds = torch.max(outputs, 1)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1209633,
     "sourceId": 2021025,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30699,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 220.254822,
   "end_time": "2024-05-21T13:11:49.356908",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-21T13:08:09.102086",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
